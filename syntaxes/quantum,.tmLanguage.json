{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Quantum",
    "fileTypes": [
        "qax",
        "qin"
    ],
    "scopeName": "source.quantum",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#axes"
        },
        {
            "include": "#include-files"
        },
        {
            "include": "#definitions"
        },
        {
            "include": "#options"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#xx"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "comment": "line comments",
                    "name": "comment.line.quantum",
                    "match": "^(\\/\\*|[Cc]).*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.quantum"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "comment": "&variables",
                    "name": "type.variable.quantum",
                    "match": "&([[:alpha:]_]\\w*)",
                    "captures": {
                        "1": {
                            "name": "support.variable.quantum"
                        }
                    }
                }
            ]
        },
        "axes": {
            "patterns": [
                {
                    "include": "#labels"
                },
                {
                    "include": "#texts"
                },
                {
                    "include": "#basic-statements"
                },
                {
                    "include": "#numeric-statements"
                }
            ]
        },
        "labels": {
            "patterns": [
                {
                    "comment": "l statement",
                    "name": "label.statement.quantum",
                    "match": "^(l)\\s(\\b([[:alpha:]_]\\w*)\\b)",
                    "captures": {
                        "1": {
                            "name": "storage.type.lstatement.quantum"
                        },
                        "2": {
                            "name": "variable.lstatement.quantum"
                        }
                    }
                }
            ]
        },
        "texts": {
            "patterns": [
                {
                    "name": "text.quantum",
                    "match": "^\\b(ttl|ttc|ttr|ttg|ttn)(.*)$",
                    "captures": {
                        "1": {
                            "name": "keyword.text.quantum"
                        },
                        "2": {
                            "name": "text.value.quantum"
                        }
                    }
                }
            ]
        },
        "basic-statements": {
            "patterns": [
                {
                    "comment": "axes n statements",
                    "name": "axes.statement.$1.quantum",
                    "begin": "^\\b(n[0-9]{2}|m)([^;]*)",
                    "end": "$",
                    "captures": {
                        "1": {
                            "name": "keyword.basic-statement.$1.quantum"
                        },
                        "2":{
                            "name":"source.groovy.embedded.basic-statement.quantum"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#options"
                        }
                    ]
                }
            ]
        },
        "numeric-statements": {
            "patterns": [
                {
                    "comment": "axes numeric statements",
                    "name": "axes.statement.numeric.quantum",
                    "match": "^\\b(col|val|fld).*(\\n\\+.*)*",
                    "captures": {
                        "1": {
                            "name": "keyword.numeric-statement.quantum"
                        }
                    }
                }
            ]
        },
        "include-files": {
            "patterns": [
                {
                    "comment": "include files",
                    "name": "include.quantum",
                    "begin": "^(\\*include)\\s+([^\\s;]+)",
                    "end": "$",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.include.quantum"
                        },
                        "2":{
                            "name":"include.file-name.quantum"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#column-code-conditions"
                        },
                        {
                            "include": "#options"
                        }
                    ]
                }
            ]
        },
        "column-code-conditions": {
            "patterns": [
                {
                    "comment": "c= conditions",
                    "name": "codition.columncode.quantum",
                    "begin": "c=",
                    "end": "(;|\n)",
                    "patterns": [
                        {
                            "include": "#columns"
                        }
                    ]
                }
            ]
        },
        "options": {
            "patterns": [
                {
                    "comment": "options",
                    "name": "options.quantum",
                    "match": ";\\s*([^\\s=;]+)",
                    "captures": {
                        "1": {
                            "name": "support.function.option.quantum"
                        }
                    }
                    
                }
            ]
        },

        "columns": {
            "patterns": [
                {
                    "comment": "columns with ()",
                    "name": "entity.name.function",
                    "begin": "c\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "column.separator.quantum",
                            "match": "(,)"
                        }
                    ]
                },
                {
                    "comment": "columns without ()",
                    "name": "entity.name.function",
                    "match": "c[a-z]?\\d+"
                }
            ]
        },
        "definitions": {
            "patterns": [
                {
                    "comment": "define variables",
                    "name": "define.quantum",
                    "match": "^(\\*def).*$",
                    "captures": {
                        "1": {
                            "name": "keyword.control.define.quantum"
                        }
                    }
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "comment": "parentheses, round brackets",
                    "name": "punctuation.brackets.round.quantum",
                    "match": "[()]"
                },
                {
                    "comment": "semicolon",
                    "name": "punctuation.semi.quantum",
                    "match": ";"
                },
                {
                    "comment": "dollor brackets",
                    "name": "string.dollar.quantum",
                    "match": "[$$]"
                },
                {
                    "comment": "single quote brackets",
                    "name": "string.quoted.single.quantum",
                    "match": "['']"
                }
            ]
        },
        "codes": {
            "patterns": [
                {
                    "comment": "codes of column",
                    "name": "string.quoted.single.char.quantum",
                    "begin": "(b)?(')",
                    "end": "'",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.quantum"
                        },
                        "2": {
                            "name": "punctuation.definition.char.quantum"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.char.quantum"
                        }
                    }
                }
            ]
        }
    }
}
